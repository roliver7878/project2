{".class": "MypyFile", "_fullname": "chardet.escprober", "_name": null, "is_stub": false, "names": {".class": "SymbolTable", "CharSetProber": {".class": "SymbolTableNode", "cross_ref": "chardet.charsetprober.CharSetProber", "kind": "Gdef"}, "CodingStateMachine": {".class": "SymbolTableNode", "cross_ref": "chardet.codingstatemachine.CodingStateMachine", "kind": "Gdef"}, "EscCharSetProber": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "TypeInfo", "_promote": null, "abstract_attributes": [], "bases": ["chardet.charsetprober.CharSetProber"], "declared_metaclass": null, "defn": {".class": "ClassDef", "fullname": "chardet.escprober.EscCharSetProber", "name": "EscCharSetProber", "type_vars": []}, "flags": [], "fullname": "chardet.escprober.EscCharSetProber", "metaclass_type": null, "module_name": "chardet.escprober", "names": {".class": "SymbolTable", "__init__": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0, 1], "arg_names": ["self", "lang_filter"], "flags": [], "fullname": "chardet.escprober.EscCharSetProber.__init__", "name": "__init__", "type": null}}, "_detected_charset": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "chardet.escprober.EscCharSetProber._detected_charset", "name": "_detected_charset", "type": {".class": "AnyType"}}}, "_detected_language": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "chardet.escprober.EscCharSetProber._detected_language", "name": "_detected_language", "type": {".class": "AnyType"}}}, "active_sm_count": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "chardet.escprober.EscCharSetProber.active_sm_count", "name": "active_sm_count", "type": {".class": "AnyType"}}}, "charset_name": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "Decorator", "func": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["self"], "flags": ["is_decorated", "is_property"], "fullname": "chardet.escprober.EscCharSetProber.charset_name", "name": "charset_name", "type": null}, "is_overload": false, "var": {".class": "Var", "flags": ["is_ready", "is_initialized_in_class", "is_property"], "fullname": null, "name": "charset_name", "type": {".class": "CallableType", "arg_kinds": [0], "arg_names": ["self"], "arg_types": [{".class": "AnyType"}], "bound_args": [], "fallback": "builtins.function", "implicit": true, "is_classmethod_class": false, "is_ellipsis_args": false, "name": "charset_name of EscCharSetProber", "ret_type": {".class": "AnyType"}, "variables": []}}}}, "coding_sm": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "chardet.escprober.EscCharSetProber.coding_sm", "name": "coding_sm", "type": {".class": "AnyType"}}}, "feed": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0, 0], "arg_names": ["self", "byte_str"], "flags": [], "fullname": "chardet.escprober.EscCharSetProber.feed", "name": "feed", "type": null}}, "get_confidence": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["self"], "flags": [], "fullname": "chardet.escprober.EscCharSetProber.get_confidence", "name": "get_confidence", "type": null}}, "language": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "Decorator", "func": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["self"], "flags": ["is_decorated", "is_property"], "fullname": "chardet.escprober.EscCharSetProber.language", "name": "language", "type": null}, "is_overload": false, "var": {".class": "Var", "flags": ["is_ready", "is_initialized_in_class", "is_property"], "fullname": null, "name": "language", "type": {".class": "CallableType", "arg_kinds": [0], "arg_names": ["self"], "arg_types": [{".class": "AnyType"}], "bound_args": [], "fallback": "builtins.function", "implicit": true, "is_classmethod_class": false, "is_ellipsis_args": false, "name": "language of EscCharSetProber", "ret_type": {".class": "AnyType"}, "variables": []}}}}, "reset": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["self"], "flags": [], "fullname": "chardet.escprober.EscCharSetProber.reset", "name": "reset", "type": null}}}, "protocol_members": null, "tuple_type": null, "type_vars": [], "typeddict_type": null}}, "HZ_SM_MODEL": {".class": "SymbolTableNode", "cross_ref": "chardet.escsm.HZ_SM_MODEL", "kind": "Gdef"}, "ISO2022CN_SM_MODEL": {".class": "SymbolTableNode", "cross_ref": "chardet.escsm.ISO2022CN_SM_MODEL", "kind": "Gdef"}, "ISO2022JP_SM_MODEL": {".class": "SymbolTableNode", "cross_ref": "chardet.escsm.ISO2022JP_SM_MODEL", "kind": "Gdef"}, "ISO2022KR_SM_MODEL": {".class": "SymbolTableNode", "cross_ref": "chardet.escsm.ISO2022KR_SM_MODEL", "kind": "Gdef"}, "LanguageFilter": {".class": "SymbolTableNode", "cross_ref": "chardet.enums.LanguageFilter", "kind": "Gdef"}, "MachineState": {".class": "SymbolTableNode", "cross_ref": "chardet.enums.MachineState", "kind": "Gdef"}, "ProbingState": {".class": "SymbolTableNode", "cross_ref": "chardet.enums.ProbingState", "kind": "Gdef"}, "__doc__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "chardet.escprober.__doc__", "name": "__doc__", "type": "builtins.str"}}, "__file__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "chardet.escprober.__file__", "name": "__file__", "type": "builtins.str"}}, "__name__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "chardet.escprober.__name__", "name": "__name__", "type": "builtins.str"}}, "__package__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "chardet.escprober.__package__", "name": "__package__", "type": "builtins.str"}}}, "path": "/home/ubuntu/environment/chardet/escprober.py"}
